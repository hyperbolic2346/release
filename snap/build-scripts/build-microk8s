#!/bin/bash
set -eu

apps="kubectl kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy"
architectures="$KUBE_ARCH"
ETCD_VERSION="v3.3.4"

KUBE_SNAP_BINS="${KUBE_SNAP_BINS:-}"
if [ -z "$KUBE_SNAP_BINS" ]; then
  echo "KUBE_SNAP_BINS is not set, downloading binaries from upstream"
  export KUBE_SNAP_BINS=build/kube_bins/$KUBE_VERSION
  mkdir -p $KUBE_SNAP_BINS
  (cd $KUBE_SNAP_BINS
    for app in $apps; do
      for arch in $architectures; do
        mkdir -p $arch
        (cd $arch
          echo "Fetching $app $KUBE_VERSION $arch"
          curl -LO \
            https://dl.k8s.io/${KUBE_VERSION}/bin/linux/$arch/$app
          chmod +x $app
          if ! file ${app} 2>&1 | grep -q 'executable'; then
            echo "${app} is not an executable"
            exit 1
          fi
        )
      done
    done
    #TODO: get the versions configurable
    curl -LO https://github.com/coreos/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-$KUBE_ARCH.tar.gz
    tar -zxvf etcd-${ETCD_VERSION}-linux-$KUBE_ARCH.tar.gz
    cp etcd-${ETCD_VERSION}-linux-$KUBE_ARCH/etcd .
  )
fi


export KUBE_SNAP_ROOT="$(readlink -f .)"
export KUBE_SNAP_BINS="$(readlink -f $KUBE_SNAP_BINS)"

for arch in $architectures; do
  echo "Building microk8s $KUBE_VERSION for $arch from $KUBE_SNAP_BINS"
  build_dir=build/microk8s
  rm -rf $build_dir
  mkdir -p $build_dir

  export KUBE_ARCH="$arch"
  declare -A kube_arch_to_snap_arch=(
    [ppc64le]=ppc64el
    [arm]=armhf
  )
  export SNAP_ARCH="${kube_arch_to_snap_arch[$arch]:-$arch}"

  sed "s/\$KUBE_VERSION/${KUBE_VERSION:1}/g" microk8s.yaml > $build_dir/snapcraft.yaml
  sed -i "s/\$SNAP_ARCH/$SNAP_ARCH/g" $build_dir/snapcraft.yaml
  (cd $build_dir && snapcraft)
  mv $build_dir/*.snap build
done

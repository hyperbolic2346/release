name: microk8s
architectures: ['$SNAP_ARCH']
version: '$KUBE_VERSION'
summary: Kubernetes in your box.
description: Microk8s deploys and configures all kubernetes services in a snap.
grade: stable
confinement: devmode

apps:
  daemon-etcd:
    command: run-with-config-args etcd
    daemon: simple
    plugs:
        - network
        - network-bind
  daemon-docker:
    command: run-with-config-args dockerd
    daemon: simple
    plugs:
        - network
        - network-bind

  daemon-apiserver:
    command: run-with-config-args kube-apiserver
    daemon: simple
    plugs:
        - network
        - network-bind

  daemon-controller-manager:
    command: run-with-config-args kube-controller-manager
    daemon: simple
    plugs:
        - network
        - network-bind
  daemon-scheduler:
    command: run-with-config-args kube-scheduler
    daemon: simple
    plugs:
        - network
        - network-bind
        - home

  daemon-kubelet:
    command: run-with-config-args kubelet
    daemon: simple

  daemon-proxy:
    command: run-with-config-args kube-proxy
    daemon: simple
    plugs:
        - network
        - network-bind
        - home
  kubectl:
    command: kubectl --kubeconfig=$SNAP/client.config

  enable:
    command: microk8s-enable.wrapper
  disable:
    command: microk8s-disable.wrapper

parts:
  microk8s:
    plugin: dump
    build-attributes: [no-patchelf]
    stage-packages:
    - ceph-common:$SNAP_ARCH
    - conntrack:$SNAP_ARCH
    - docker.io:$SNAP_ARCH
    - aufs-tools:$SNAP_ARCH
    source: .
    prepare: |
      set -eu
      $KUBE_SNAP_ROOT/microk8s-resources/create-install-hook
      cp -r $KUBE_SNAP_ROOT/microk8s-resources/default-args .
      cp $KUBE_SNAP_ROOT/microk8s-resources/run-with-config-args .

      echo "Building certs"
      mkdir certs
      openssl genrsa -out ./certs/serviceaccount.key 2048
      openssl genrsa -out ./certs/ca.key 2048
      openssl req -x509 -new -nodes -key ./certs/ca.key -subj "/CN=127.0.0.1" -days 10000 -out ./certs/ca.crt
      openssl genrsa -out ./certs/server.key 2048
      openssl req -new -key ./certs/server.key -out ./certs/server.csr -config $KUBE_SNAP_ROOT/microk8s-resources/certs/csr.conf
      openssl x509 -req -in ./certs/server.csr -CA ./certs/ca.crt -CAkey ./certs/ca.key -CAcreateserial -out ./certs/server.crt -days 100000 -extensions v3_ext -extfile $KUBE_SNAP_ROOT/microk8s-resources/certs/csr.conf
      rm -rf .srl

      echo "Preparing cni"
      mkdir -p opt/cni/bin/
      cp $KUBE_SNAP_BINS/flannel opt/cni/bin/
      cp $KUBE_SNAP_BINS/ptp opt/cni/bin/
      cp $KUBE_SNAP_BINS/host-local opt/cni/bin/
      cp $KUBE_SNAP_BINS/portmap opt/cni/bin/
      cp $KUBE_SNAP_BINS/tuning opt/cni/bin/
      cp $KUBE_SNAP_BINS/vlan opt/cni/bin/
      cp $KUBE_SNAP_BINS/sample opt/cni/bin/
      cp $KUBE_SNAP_BINS/dhcp opt/cni/bin/
      cp $KUBE_SNAP_BINS/ipvlan opt/cni/bin/
      cp $KUBE_SNAP_BINS/macvlan opt/cni/bin/
      cp $KUBE_SNAP_BINS/loopback opt/cni/bin/
      cp $KUBE_SNAP_BINS/bridge opt/cni/bin/

      echo "Preparing etcd"
      cp $KUBE_SNAP_BINS/etcd .

      echo "Preparing kube-apiserver"
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kube-apiserver .
      cp $KUBE_SNAP_ROOT/microk8s-resources/known_token.csv .
      cp $KUBE_SNAP_ROOT/microk8s-resources/basic_auth.csv .

      echo "Preparing kube-controller-manager"
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kube-controller-manager .

      echo "Preparing kube-scheduler"
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kube-scheduler .

      echo "Preparing kubelet"
      mkdir -p configs
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kubelet .
      cp $KUBE_SNAP_ROOT/microk8s-resources/kubelet.config ./configs/

      echo "Preparing kube-proxy"
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kube-proxy .
      cp $KUBE_SNAP_ROOT/microk8s-resources/kubeproxy.config .

      echo "Preparing kubelet"
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kubectl .

      echo "Preparing user config"
      cp $KUBE_SNAP_ROOT/microk8s-resources/client.config .

      echo "Preparing capabilities"
      cp -r $KUBE_SNAP_ROOT/microk8s-resources/yaml .

      echo "Preparing commands"
      cp $KUBE_SNAP_ROOT/microk8s-resources/wrappers/* .
    snap:
      - .
